stages:
  - setup
  - prepare-faas
  - test
  - stryke
  - publish-docker
  - review
  - report

variables:
  DOTNET_VERSION: "6.0"
  GIT_SUBMODULE_STRATEGY: recursive
  PACKAGE_SOURCE_NAME: softozor-packages-gitlab
  TEST_IMAGE_NAME: softozor/hasura-jps-test

.docker-login: &docker-login
  - docker login -u $DOCKER_HUB_REGISTRY_USER -p $DOCKER_HUB_REGISTRY_PASSWORD $DOCKER_HUB_REGISTRY

.docker-push: &docker-push
  - docker push $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA
  - docker push $DOCKER_IMAGE:latest

.publish-faas-functions: &publish-faas-functions
  stage: publish-docker
  image: softozor/faas-cli:${TOOLS_SHA}
  before_script:
    - *docker-login
  script:
    - cd $PATH_TO_FUNCTIONS
    - IMG_TAG=${CI_COMMIT_SHORT_SHA} faas-cli build -f ./${FAAS_CONFIG}.yml
    - IMG_TAG=${CI_COMMIT_SHORT_SHA} faas-cli push -f ./${FAAS_CONFIG}.yml
    - IMG_TAG=latest faas-cli build -f ./${FAAS_CONFIG}.yml
    - IMG_TAG=latest faas-cli push -f ./${FAAS_CONFIG}.yml

.stryke-dotnet-tests: &stryke-dotnet-tests
  stage: stryke
  image: mcr.microsoft.com/dotnet/sdk:${DOTNET_VERSION}-alpine-amd64
  before_script:
    - dotnet nuget add source "${CI_API_V4_URL}/projects/198/packages/nuget/index.json" --name ${PACKAGE_SOURCE_NAME}
    - dotnet tool restore
  script:
    - cd serverless/functions/${TEST_PROJECT_NAME}
    - dotnet stryker
  artifacts:  
    paths:
      - serverless/functions/*/StrykerOutput/*/reports/*.html
      - serverless/functions/*/StrykerOutput/*/reports/*.json

start runners:
  stage: setup
  image: softozor/gitlab-runner-mgmt:$JELASTIC_ENV_MGMT_SHA
  script:
    - |
      python3 /app/start_env.py --api-url ${JELASTIC_API_URL} \
        --access-token ${JELASTIC_ACCESS_TOKEN} \
        --env-name ${GITLAB_RUNNERS_ENV_NAME}

get faas templates:
  stage: prepare-faas
  # TODO: use image with faas-cli and git
  image: ${TEST_IMAGE_NAME}:latest
  script:
    # this hack is necessary to allow for a call to faas-cli deploy later in the test that
    # is not done from within the features/data/functions folder but from the project root
    # instead
    - faas-cli template pull
    - faas-cli template pull https://${CI_SERVER_HOST}/softozor/faas-templates.git
  artifacts:
    paths:
      - template

dotnet-tests:
  stage: test
  image: mcr.microsoft.com/dotnet/sdk:${DOTNET_VERSION}-alpine-amd64
  variables:
    CONFIGURATION: Release
  before_script:
    - dotnet nuget add source "${CI_API_V4_URL}/projects/198/packages/nuget/index.json" --name ${PACKAGE_SOURCE_NAME}
  script:
    - dotnet test -c ${CONFIGURATION} --logger:"junit;LogFilePath=.\test-reports\test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose" ./HasuraJps.sln
  artifacts:
    reports:
      junit:
        - serverless/functions/*.Tests/test-reports/*.xml
    paths:
      - serverless/functions/*.Tests/test-reports/*.xml
  only:
    changes:
      - serverless/functions/**/*

stryke-set-password-tests:
  <<: *stryke-dotnet-tests
  variables:
    PROJECT_NAME: Softozor.FusionAuth.SetPassword
    TEST_PROJECT_NAME: Softozor.FusionAuth.SetPassword.Tests
  only:
    changes:
      - serverless/functions/Softozor.FusionAuth.SetPassword/*
      - serverless/functions/Softozor.FusionAuth.SetPassword.Tests/*

stryke-sign-in-tests:
  <<: *stryke-dotnet-tests
  variables:
    PROJECT_NAME: Softozor.FusionAuth.SignIn
    TEST_PROJECT_NAME: Softozor.FusionAuth.SignIn.Tests
  only:
    changes:
      - serverless/functions/Softozor.FusionAuth.SignIn/*
      - serverless/functions/Softozor.FusionAuth.SignIn.Tests/*

stryke-sign-up-tests:
  <<: *stryke-dotnet-tests
  variables:
    PROJECT_NAME: Softozor.FusionAuth.SignUp
    TEST_PROJECT_NAME: Softozor.FusionAuth.SignUp.Tests
  only:
    changes:
      - serverless/functions/Softozor.FusionAuth.SignUp/*
      - serverless/functions/Softozor.FusionAuth.SignUp.Tests/*

stryke-token-validation-tests:
  <<: *stryke-dotnet-tests
  variables:
    PROJECT_NAME: Softozor.FusionAuth.TokenValidation
    TEST_PROJECT_NAME: Softozor.FusionAuth.TokenValidation.Tests
  only:
    changes:
      - serverless/functions/Softozor.FusionAuth.TokenValidation/*
      - serverless/functions/Softozor.FusionAuth.TokenValidation.Tests/*

publish-graphql-engine-image:
  stage: publish-docker
  image: docker:latest
  variables:
    DOCKER_IMAGE: softozor/graphql-engine
  before_script:
    - *docker-login
  script:
    - |
      docker build . -f ci/graphql-engine/Dockerfile \
        -t $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA -t $DOCKER_IMAGE:latest \
        --build-arg HASURA_VERSION=${HASURA_CLI_VERSION}
    - *docker-push
  # always build because it depends on the HASURA_CLI_VERSION env var
  # if that var changes, this can't be detected

publish-feature-test-image:
  stage: publish-docker
  image: docker:latest
  variables:
    DOCKER_IMAGE: ${TEST_IMAGE_NAME}
    DOCKERFILE_FOLDER: ./ci/feature-tests
  before_script:
    - *docker-login
  script:
    - |
      docker build $DOCKERFILE_FOLDER -t $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA -t $DOCKER_IMAGE:latest \
        --build-arg FAAS_CLI_VERSION=${FAAS_CLI_VERSION} \
        --build-arg HASURA_CLI_VERSION=${HASURA_CLI_VERSION} \
        --build-arg FUSIONAUTH_VERSION=${FUSIONAUTH_VERSION}
    - *docker-push
  only:
    changes:
      - ci/feature-tests/*

publish-faas-image:
  stage: publish-docker
  image: docker:latest
  variables:
    DOCKER_IMAGE: softozor/ubuntu-git
    DOCKERFILE_FOLDER: ./ci/ubuntu
  before_script:
    - *docker-login
  script:
    - docker build $DOCKERFILE_FOLDER -t $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA -t $DOCKER_IMAGE:latest
    - *docker-push
  only:
    changes:
      - ci/ubuntu/*

publish-fusionauth-app-image:
  stage: publish-docker
  image: docker:latest
  variables:
    DOCKER_IMAGE: softozor/fusionauth-app
    DOCKERFILE_FOLDER: ./ci/fusionauth-app
  before_script:
    - *docker-login
  script:
    - |
      docker build $DOCKERFILE_FOLDER -t $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA -t $DOCKER_IMAGE:latest \
        --build-arg FUSIONAUTH_VERSION=${FUSIONAUTH_VERSION}
    - *docker-push
  only:
    changes:
      - ci/fusionauth-app/*

publish-test-faas-functions:
  <<: *publish-faas-functions
  variables:
    FAAS_CONFIG: faas
    PATH_TO_FUNCTIONS: features/data/functions
  only:
    changes:
      - features/data/functions/**/*

publish-fusionauth-functions:
  <<: *publish-faas-functions
  variables:
    FAAS_CONFIG: fusionauth
    PATH_TO_FUNCTIONS: serverless/functions
  # build everytime because we deploy the function images with tag
  # set to commit sha, therefore the images must exist

publish-mailhog-functions:
  <<: *publish-faas-functions
  variables:
    FAAS_CONFIG: mailhog
    PATH_TO_FUNCTIONS: serverless/functions
  # build everytime because we deploy the function images with tag
  # set to commit sha, therefore the images must exist

acceptance test dev:
  stage: review
  # TODO: simplify this image
  image: ${TEST_IMAGE_NAME}:latest
  script:
    - |
      behave --junit --junit-directory ./features/test-reports --tags="not @wip and not @production" \
        -D jelastic-region="${JELASTIC_REGION}" \
        -D project-root-folder="${CI_PROJECT_DIR}" \
        -D api-url="${JELASTIC_API_URL}" \
        -D api-token="${JELASTIC_ACCESS_TOKEN}" \
        -D commit-sha="${CI_COMMIT_SHORT_SHA}" \
        -D cluster-type="dev" \
        -D graylog-host="${GRAYLOG_HOST}" \
        -D graylog-port="${GRAYLOG_PORT}" \
        -D docker-hub-registry-user="${DOCKER_HUB_REGISTRY_USER}" \
        -D docker-hub-registry-password="${DOCKER_HUB_REGISTRY_PASSWORD}"
  artifacts:
    reports:
      junit:
        - ./features/test-reports/*.xml
    paths:
      - ./features/test-reports/*.xml

acceptance test production:
  stage: review
  image: ${TEST_IMAGE_NAME}:latest
  script:
    - |
      behave --junit --junit-directory ./features/test-reports --tags="not @wip and not @development" \
        -D jelastic-region="${JELASTIC_REGION}" \
        -D project-root-folder="${CI_PROJECT_DIR}" \
        -D api-url="${JELASTIC_API_URL}" \
        -D api-token="${JELASTIC_ACCESS_TOKEN}" \
        -D commit-sha="${CI_COMMIT_SHORT_SHA}" \
        -D cluster-type="prod" \
        -D graylog-host="${GRAYLOG_HOST}" \
        -D graylog-port="${GRAYLOG_PORT}" \
        -D docker-hub-registry-user="${DOCKER_HUB_REGISTRY_USER}" \
        -D docker-hub-registry-password="${DOCKER_HUB_REGISTRY_PASSWORD}"
  artifacts:
    reports:
      junit:
        - ./features/test-reports/*.xml
    paths:
      - ./features/test-reports/*.xml

publish pickles:
  stage: report
  image: softozor/pickles:2.21.1
  variables:
    APPLICATION_NAME: hasura-jps
    OUTPUT_DIR: ./pickles
  script:
    - |
      mono /pickles/Pickles.exe --feature-directory=. \
        --output-directory=${OUTPUT_DIR} \
        --system-under-test-name=${APPLICATION_NAME} \
        --system-under-test-version=$CI_COMMIT_SHORT_SHA \
        --documentation-format=dhtml \
        --language=en --exp --et 'wip' --enableComments=false
  artifacts:
    paths:
      - $OUTPUT_DIR
