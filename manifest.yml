type: install
name: Jelasticozor infrastructure
baseUrl: http://gitlab.hidora.com/softozor/hasura-jps/-/raw/master

settings:
  fields:
    - type: spacer
      caption: Hasura
    - name: graphqlEngineTag
      caption: Graphql Engine Tag
      type: string
      default: latest
    - name: enableHasuraConsole
      caption: Enable console
      type: checkbox
      value: true
    - type: spacer
      caption: Auth
    - name: fusionauthVersion
      caption: Fusionauth version
      type: string
      default: 1.30.1
    - name: authAdminEmail
      caption: Admin email
      type: string
      required: true
    - name: authIssuer
      caption: JWT issuer
      type: string
      default: your-company.com
    - type: spacer
      caption: Faas
    - name: faasTag
      caption: Faas Image tag
      type: string
      default: latest
    - name: fncTag
      caption: Faas Functions Image tag
      type: string
      default: latest

globals:
  # postgres
  DB_ADMIN_USERNAME: webadmin
  DB_NAME: hasura
  DB_USERNAME: hasura_user
  DB_PASSWORD: ${fn.password(20)}
  DB_AUTH_NAME: fusionauth
  DB_AUTH_USERNAME: auth
  DB_AUTH_PASSWORD: ${fn.password(20)}
  # hasura
  HASURA_ADMIN_SECRET: ${fn.password(20)}
  HASURA_SERVER_PORT: 8080
  HASURA_UNAUTHORIZED_ROLE: anonymous
  # faas
  FAAS_PORT: 8080
  # auth
  AUTH_PORT: 9011
  AUTH_ADMIN_PASSWORD: ${fn.password(20)}
  DATA_PROTECTION_SECRET_KEY: ${fn.password(40)}
  ALMIGHTY_API_KEY: ${fn.password(40)}
  SERVERLESS_API_KEY: ${fn.password(40)}

nodes:
- count: 1
  cloudlets: 4
  nodeGroup: bl
  nodeType: nginx-dockerized
- displayName: faasd
  count: 1
  cloudlets: 16
  nodeGroup: faas
  nodeType: docker
  image: softozor/ubuntu-git:${settings.faasTag}
- displayName: database
  count: 2
  fixedCloudlets: 3
  cloudlets: 32
  nodeType: postgres13
  scalingMode: STATELESS
  password: ${fn.password}
  cluster: true
- displayName: api
  count: 1
  cloudlets: 32
  nodeGroup: cp
  nodeType: docker
  image: softozor/graphql-engine:${settings.graphqlEngineTag}
- displayName: auth
  count: 1
  cloudlets: 32
  nodeGroup: auth
  nodeType: docker
  image: fusionauth/fusionauth-app:${settings.fusionauthVersion}
skipNodeEmails: true

onInstall:
  - installFusionAuth
  # the faas engine uses fusionauth
  - installFaas
  # hasura uses the faas engine
  - installHasura
  # the load balancer uses hasura
  - installLoadBalancer

actions:
  installFaas:
    install:
      jps: serverless/manifest.yml
      settings:
        authApiKey: ${globals.SERVERLESS_API_KEY}
        authUrl: http://${nodes.auth.master.intIP}:${globals.AUTH_PORT}
        dataProtectionSecretKey: ${globals.DATA_PROTECTION_SECRET_KEY}
        fncTag: ${settings.fncTag}
  installHasura:
    install:
      jps: hasura/manifest.yml
      settings:
        dbAdminUsername: ${globals.DB_ADMIN_USERNAME}
        dbAdminPassword: ${nodes.sqldb.password}
        dbUsername: ${globals.DB_USERNAME}
        dbPassword: ${globals.DB_PASSWORD}
        dbName: ${globals.DB_NAME}
        enableConsole: ${settings.enableHasuraConsole}
        adminSecret: ${globals.HASURA_ADMIN_SECRET}
        unauthorizedRole: ${globals.HASURA_UNAUTHORIZED_ROLE}
        serverPort: ${globals.HASURA_SERVER_PORT}
        faasHostname: ${nodes.faas.master.intIP}
        faasPort: ${globals.FAAS_PORT}
  installLoadBalancer:
    install:
      jps: bl/manifest.yml
      settings:
        serverPort: ${globals.HASURA_SERVER_PORT}
  installFusionAuth:
    install:
      jps: fusionauth/manifest.yml
      settings:
        databaseName: ${globals.DB_AUTH_NAME}
        databaseRootUsername: ${globals.DB_ADMIN_USERNAME}
        databaseRootPassword: ${nodes.sqldb.password}
        databaseUsername: ${globals.DB_AUTH_USERNAME}
        databasePassword: ${globals.DB_AUTH_PASSWORD}
        appRunTime: production
        searchType: database
        adminEmail: ${settings.authAdminEmail}
        adminPassword: ${globals.AUTH_ADMIN_PASSWORD}
        issuer: ${settings.authIssuer}
        almightyApiKey: ${globals.ALMIGHTY_API_KEY}
        serverlessApiKey: ${globals.SERVERLESS_API_KEY}

success:
  text: |
    **Hasura Console**: [${env.protocol}://${env.domain}/](${env.protocol}://${env.domain}/)  
    **Hasura Admin Secret**: ${globals.HASURA_ADMIN_SECRET}  
    **Auth Admin Panel**: [${nodes.auth.master.url}](${nodes.auth.master.url})  
    **Database Admin Panel**: [${nodes.sqldb.master.url}](${nodes.sqldb.master.url})  
    **Database Admin User**: ${globals.DB_ADMIN_USERNAME}  
    **Database Admin Password**: ${nodes.sqldb.password}  
    **Hasura Database Name**: ${globals.DB_NAME}  
    **Hasura Database Username**: ${globals.DB_USERNAME}  
    **Hasura Database Password**: ${globals.DB_PASSWORD}  
    **Auth Database Name**: ${globals.DB_AUTH_NAME}  
    **Auth Database Username**: ${globals.DB_AUTH_USERNAME}  
    **Auth Database Password**: ${globals.DB_AUTH_PASSWORD}  
    **Auth Admin Email**: ${settings.authAdminEmail}  
    **Auth Admin Password**: ${globals.AUTH_ADMIN_PASSWORD}  
    **Auth Almighty API Key**: ${globals.ALMIGHTY_API_KEY}  
    **Auth Serverless API Key**: ${globals.SERVERLESS_API_KEY}  
    **Data Protection Secret Key**: ${globals.DATA_PROTECTION_SECRET_KEY}