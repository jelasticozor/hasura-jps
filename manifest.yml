type: install
name: Hasura infrastructure
baseUrl: https://gitlab.hidora.com/softozor/hasura-jps/-/raw/master

settings:
  fields:
    - type: spacer
      caption: Cluster Type
    - type: radio-fieldset
      name: clusterType
      values:
        - value: prod
          caption: Production cluster
        - value: dev
          caption: Development cluster
      default: prod
      showIf:
        prod:
          - type: spacer
            caption: Mail server
          - name: mailServerHost
            caption: Host
            type: string
            required: true
          - name: mailServerPort
            caption: Port
            type: string
            required: true
          - name: mailServerUsername
            caption: Username
            type: string
            required: true
          - name: mailServerPassword
            caption: Password
            type: string
            inputType: password
            required: true
          - name: mailServerEnableSsl
            caption: Enable SSL
            type: toggle
            value: true
    - type: spacer
      caption: Hasura
    - name: graphqlEngineImage
      caption: GraphQL Engine Image
      type: string
      default: softozor/graphql-engine:latest
    - name: useAutoGeneratedHasuraAdminSecret
      type: toggle
      caption: Auto-generate Admin Secret
      value: true
      hidden: false
      showIf:
        false:
          name: hasuraAdminSecret
          caption: Admin Secret
          type: string
          inputType: password
          required: true
    - type: spacer
      caption: Auth
    - name: fusionauthVersion
      caption: Fusionauth version
      type: string
      default: 1.32.1
    - name: useJelasticEmailAsAuthAdminEmail
      type: toggle
      caption: Use Jelastic Email
      value: true
      hidden: false
      showIf:
        false:
          name: authAdminEmail
          caption: Admin email
          type: string
          required: true
    - name: authIssuer
      caption: JWT issuer
      type: string
      default: your-company.com
    - type: spacer
      caption: Faas
    - name: fncTag
      caption: Faas Functions Image tag
      type: string
      default: latest
    - type: spacer
      caption: SSL
    - name: useDefaultExternalDomain
      type: toggle
      caption: Use Default External Domain
      value: true
      hidden: false
      showIf:
        false:
          - name: externalDomains
            caption: External domain names (;-separated list)
            type: string
            vtype: domainlist
            required: true
    - type: space
      caption: Logs aggregation
    - name: useExternalGraylog
      type: toggle
      caption: Use External Graylog
      value: false
      hidden: false
      showIf:
        true:
          - name: graylogServerHost
            caption: Host
            type: string
            required: true
          - name: graylogServerPort
            caption: Port
            type: string
            required: true
    - type: spacer
      caption: Docker Hub
    - name: useAnonymousDockerHubAccount
      type: toggle
      caption: Use Anonymous Docker Hub
      value: true
      hidden: false
      showIf:
        false:
          - name: dockerHubUser
            caption: Username
            type: string
            required: true
          - name: dockerHubPassword
            caption: Password
            type: string
            inputType: password
            required: true

globals:
  # postgres
  DB_ADMIN_USERNAME: webadmin
  DB_NAME: hasura
  DB_USERNAME: hasura_user
  DB_PASSWORD: ${fn.password(20)}
  DB_AUTH_NAME: fusionauth
  DB_AUTH_USERNAME: auth
  DB_AUTH_PASSWORD: ${fn.password(20)}
  # hasura
  HASURA_SERVER_PORT: 8080
  HASURA_UNAUTHORIZED_ROLE: anonymous
  HASURA_ADMIN_SECRET_AUTO: ${fn.password(40)}
  HASURA_CLAIMS_NAMESPACE: https://hasura.io/jwt/claims
  # faas
  FAAS_PORT: 8080
  # auth
  AUTH_PORT: 9011
  AUTH_ADMIN_PASSWORD: ${fn.password(20)}
  ALMIGHTY_API_KEY: ${fn.password(40)}
  SERVERLESS_API_KEY: ${fn.password(40)}
  JWT_KEY_ALGORITHM: RS256

nodes:
- count: 1
  cloudlets: 4
  nodeGroup: bl
  nodeType: nginx-dockerized
- displayName: faasd
  count: 1
  cloudlets: 16
  nodeGroup: faas
  nodeType: docker
  image: softozor/ubuntu-git:latest
- displayName: database
  count: 2
  fixedCloudlets: 3
  cloudlets: 32
  nodeType: postgres13
  scalingMode: STATELESS
  password: ${fn.password}
  cluster: true
- displayName: api
  count: 1
  cloudlets: 32
  nodeGroup: cp
  nodeType: docker
  image: ${settings.graphqlEngineImage}
- displayName: auth
  count: 1
  cloudlets: 32
  nodeGroup: auth
  nodeType: docker
  image: fusionauth/fusionauth-app:${settings.fusionauthVersion}
skipNodeEmails: true

onInstall:
  - computeOptionalParams
  - installMailServer
  # fusionauth uses the mail server
  - installFusionAuth
  # the faas engine uses fusionauth
  - installFaas
  # hasura uses the faas engine
  - installHasura
  # the load balancer uses hasura
  - installLoadBalancer
  - if ("${settings.clusterType}" == "dev"):
      - exposeMailhogApi

actions:
  computeOptionalParams:
    - script: |
        return {
          result: 0,
          email: ${settings.useJelasticEmailAsAuthAdminEmail} ? "${user.email}" : "${settings.authAdminEmail}",
          hasuraAdminSecret: ${settings.useAutoGeneratedHasuraAdminSecret} ? "${globals.HASURA_ADMIN_SECRET_AUTO}" : "${settings.hasuraAdminSecret}",
          hasuraEnableConsole: "${settings.clusterType}" == "dev" ? "true" : "false",
          externalDomains: ${settings.useDefaultExternalDomain} ? "${env.domain}" : "${settings.externalDomains}",
          graylog: {
            host: ${settings.useExternalGraylog} ? "${settings.graylogServerHost}" : "",
            port: ${settings.useExternalGraylog} ? "${settings.graylogServerPort}" : "",
          },
          dockerHub: {
            user: ${settings.useAnonymousDockerHubAccount} ? "" : "${settings.dockerHubUser}",
            password: ${settings.useAnonymousDockerHubAccount} ? "" : "${settings.dockerHubPassword}",
          }
        };
    - setGlobals:
        USER_EMAIL: ${response.email}
        HASURA_ADMIN_SECRET: ${response.hasuraAdminSecret}
        HASURA_ENABLE_CONSOLE: ${response.hasuraEnableConsole}
        EXTERNAL_DOMAINS: ${response.externalDomains}
        GRAYLOG_HOSTNAME: ${response.graylog.host}
        GRAYLOG_PORT: ${response.graylog.port}
        USE_ANONYMOUS_DOCKER_HUB: ${settings.useAnonymousDockerHubAccount}
        DOCKER_HUB_USER: ${response.dockerHub.user}
        DOCKER_HUB_PASSWORD: ${response.dockerHub.password}
  installMailServer:
    - if ("${settings.clusterType}" == "dev"):
        - install:
            jps: mailhog/manifest.yml
        - setGlobals:
            MAIL_SERVER_HOST: ${nodes.mail.master.intIP}
            MAIL_SERVER_PORT: 1025
            MAIL_SERVER_USERNAME: ""
            MAIL_SERVER_PASSWORD: ""
            MAIL_SERVER_SSL: "false"
            MAIL_SERVER_SUCCESS_TEXT: "**Mailhog UI**: [${nodes.mail.master.url}](${nodes.mail.master.url})  "
    - else:
        - setGlobals:
            MAIL_SERVER_HOST: ${settings.mailServerHost}
            MAIL_SERVER_PORT: ${settings.mailServerPort}
            MAIL_SERVER_USERNAME: ${settings.mailServerUsername}
            MAIL_SERVER_PASSWORD: ${settings.mailServerPassword}
            MAIL_SERVER_SSL: ${settings.mailServerEnableSsl}
            MAIL_SERVER_SUCCESS_TEXT: ""
  installFaas:
    - install:
        jps: serverless/manifest.yml
        settings:
          authApiKey: ${globals.SERVERLESS_API_KEY}
          authUrl: http://${nodes.auth.master.intIP}:${globals.AUTH_PORT}
          fncTag: ${settings.fncTag}
          logsAggregatorHost: ${globals.GRAYLOG_HOSTNAME}
          logsAggregatorPort: ${globals.GRAYLOG_PORT}
          useAnonymousDockerHub: ${globals.USE_ANONYMOUS_DOCKER_HUB}
          dockerHubUser: ${globals.DOCKER_HUB_USER}
          dockerHubPassword: ${globals.DOCKER_HUB_PASSWORD}
    - api:
        - method: environment.file.Read
          params:
            nodeGroup: faas
            path: /var/lib/faasd/secrets/basic-auth-user
    - setGlobals:
        FAAS_USER: ${response.body}
    - api:
        - method: environment.file.Read
          params:
            nodeGroup: faas
            path: /var/lib/faasd/secrets/basic-auth-password
    - setGlobals:
        FAAS_PASSWORD: ${response.body}
  installHasura:
    - install:
        jps: hasura/manifest.yml
        settings:
          clusterType: ${settings.clusterType}
          dbAdminUsername: ${globals.DB_ADMIN_USERNAME}
          dbAdminPassword: ${nodes.sqldb.password}
          dbUsername: ${globals.DB_USERNAME}
          dbPassword: ${globals.DB_PASSWORD}
          dbName: ${globals.DB_NAME}
          enableConsole: ${globals.HASURA_ENABLE_CONSOLE}
          adminSecret: ${globals.HASURA_ADMIN_SECRET}
          unauthorizedRole: ${globals.HASURA_UNAUTHORIZED_ROLE}
          serverPort: ${globals.HASURA_SERVER_PORT}
          faasHostname: ${nodes.faas.master.intIP}
          faasPort: ${globals.FAAS_PORT}
          hasuraClaimsNamespace: ${globals.HASURA_CLAIMS_NAMESPACE}
          authAlmightyApiKey: ${globals.ALMIGHTY_API_KEY}
          authPort: ${globals.AUTH_PORT}
          authIssuer: ${settings.authIssuer}
          jwtKeyAlgorithm: ${globals.JWT_KEY_ALGORITHM}
  installLoadBalancer:
    - install:
        jps: bl/manifest.yml
        settings:
          externalDomains: ${globals.EXTERNAL_DOMAINS}
  installFusionAuth:
    - install:
        jps: fusionauth/manifest.yml
        settings:
          databaseName: ${globals.DB_AUTH_NAME}
          databaseRootUsername: ${globals.DB_ADMIN_USERNAME}
          databaseRootPassword: ${nodes.sqldb.password}
          databaseUsername: ${globals.DB_AUTH_USERNAME}
          databasePassword: ${globals.DB_AUTH_PASSWORD}
          appRunTime: production
          searchType: database
          adminEmail: ${globals.USER_EMAIL}
          adminPassword: ${globals.AUTH_ADMIN_PASSWORD}
          issuer: ${settings.authIssuer}
          almightyApiKey: ${globals.ALMIGHTY_API_KEY}
          serverlessApiKey: ${globals.SERVERLESS_API_KEY}
          mailServerHost: ${globals.MAIL_SERVER_HOST}
          mailServerPort: ${globals.MAIL_SERVER_PORT}
          mailServerUsername: ${globals.MAIL_SERVER_USERNAME}
          mailServerPassword: ${globals.MAIL_SERVER_PASSWORD}
          mailServerEnableSsl: ${globals.MAIL_SERVER_SSL}
          fromEmail: no-reply@${settings.authIssuer}
          fromName: ${settings.authIssuer}
          hasuraClaimsNamespace: ${globals.HASURA_CLAIMS_NAMESPACE}
          fusionauthVersion: ${settings.fusionauthVersion}
  exposeMailhogApi:
    - install:
        jps: mailhog/expose-api.yml
        settings:
          mailServerHost: ${globals.MAIL_SERVER_HOST}

success:
  text: |
    ${globals.MAIL_SERVER_SUCCESS_TEXT}
    **Hasura Console**: [${env.protocol}://${env.domain}/](${env.protocol}://${env.domain}/)  
    **Hasura Admin Secret**: ${globals.HASURA_ADMIN_SECRET}  
    **Auth Admin Panel**: [${nodes.auth.master.url}](${nodes.auth.master.url})  
    **Database Admin Panel**: [${nodes.sqldb.master.url}](${nodes.sqldb.master.url})  
    **Database Admin User**: ${globals.DB_ADMIN_USERNAME}  
    **Database Admin Password**: ${nodes.sqldb.password}  
    **Hasura Database Name**: ${globals.DB_NAME}  
    **Hasura Database Username**: ${globals.DB_USERNAME}  
    **Hasura Database Password**: ${globals.DB_PASSWORD}  
    **Auth Database Name**: ${globals.DB_AUTH_NAME}  
    **Auth Database Username**: ${globals.DB_AUTH_USERNAME}  
    **Auth Database Password**: ${globals.DB_AUTH_PASSWORD}  
    **Auth Admin Email**: ${globals.USER_EMAIL}  
    **Auth Admin Password**: ${globals.AUTH_ADMIN_PASSWORD}  
    **Faas Admin User**: ${globals.FAAS_USER}  
    **Faas Admin Password**: ${globals.FAAS_PASSWORD}  
    **Auth Almighty API Key**: ${globals.ALMIGHTY_API_KEY}  
    **Auth Serverless API Key**: ${globals.SERVERLESS_API_KEY}
